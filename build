#!/usr/bin/env node
/* vim: set filetype=javascript : */

var exec = require("child_process").exec;
var fs = require("fs");
var Gaze = require("gaze").Gaze;
var _ = require("lodash");
var minimatch = require("minimatch");
var getopt = require("node-getopt");
var shell = require("shelljs");

var cwd = process.cwd()+"/";
var out = process.stdout;

var buildsData = fs.readFileSync("builds.json", "utf-8");
var builds = JSON.parse(buildsData);

var opts = getopt.create([
	["r", "run=SCRIPT", "run script after build"],
	["w", "watch", "watch source files"],
	["h", "help", "show this help"]
])
.bindHelp()
.parseSystem();
var args = opts.argv;
var options = opts.options;

// Interpret "all" in args
if( _.size(args) == 0 || _.contains(args, "all") )
{
	args = _.keys(builds);
}

var buildRunScriptFunc = function(scriptName)
{
	var runBuildScript = function()
	{
		out.write("Running \""+scriptName+"\"... ");

		var result = shell.exec("./"+scriptName).code;

		if(result == 0)
			out.write("Complete!\n");
		else
		{
			out.write("failed.\n");
			throw new Error("`"+scriptName+"` failed and returned: "+result);
		}
	}

	return runBuildScript;
}

_.each(builds, function(build)
{
	var runBuildFunc = buildRunScriptFunc(build.script);
	build["buildFunc"] = runBuildFunc;
});

var runAfterCommand = function()
{
	out.write("Running `"+options.run+"`...");
	shell.exec(options.run);
	out.write(" Done!\n");
};

var build = function()
{
	_.each(args, function(arg)
	{
		builds[arg].buildFunc();
	});

	if(options.run)
		runAfterCommand();
};

if(options.watch)
{
	console.log("Watching source files...");

	_.each(args, function(arg)
	{
		var watchStr = builds[arg].watch;

		var gaze = new Gaze(watchStr);
		gaze.on("all", function(event, filepath)
		{
			// We have to double check the path since "gaze" has a bug
			var matches = minimatch(filepath, cwd+watchStr);
			if(!matches)
				return;

			try
			{
				builds[arg].buildFunc();
				runAfterCommand();
			}
			catch (e)
			{
				console.error("An error occured while trying to build: "+arg);
				console.error(e);
			}
		});
	});
}

build();
